#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BEE.LichLamViec
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BEEREMA_EPhat")]
	public partial class LichHen_NhanVienDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLichHen_NhanVien(LichHen_NhanVien instance);
    partial void UpdateLichHen_NhanVien(LichHen_NhanVien instance);
    partial void DeleteLichHen_NhanVien(LichHen_NhanVien instance);
    #endregion
		
		public LichHen_NhanVienDataContext() : 
				base(global::BEE.LichLamViec.Properties.Settings.Default.BEEREMA_EPhatConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LichHen_NhanVienDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LichHen_NhanVienDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LichHen_NhanVienDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LichHen_NhanVienDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LichHen_NhanVien> LichHen_NhanViens
		{
			get
			{
				return this.GetTable<LichHen_NhanVien>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LichHen_NhanVien")]
	public partial class LichHen_NhanVien : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaLH;
		
		private int _MaNV;
		
		private System.Nullable<bool> _IsMain;
		
		private System.Nullable<bool> _IsNhac;
		
		private System.Nullable<bool> _DaNhac;
		
		private System.Nullable<System.DateTime> _NgayNhac;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaLHChanging(int value);
    partial void OnMaLHChanged();
    partial void OnMaNVChanging(int value);
    partial void OnMaNVChanged();
    partial void OnIsMainChanging(System.Nullable<bool> value);
    partial void OnIsMainChanged();
    partial void OnIsNhacChanging(System.Nullable<bool> value);
    partial void OnIsNhacChanged();
    partial void OnDaNhacChanging(System.Nullable<bool> value);
    partial void OnDaNhacChanged();
    partial void OnNgayNhacChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayNhacChanged();
    #endregion
		
		public LichHen_NhanVien()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLH", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaLH
		{
			get
			{
				return this._MaLH;
			}
			set
			{
				if ((this._MaLH != value))
				{
					this.OnMaLHChanging(value);
					this.SendPropertyChanging();
					this._MaLH = value;
					this.SendPropertyChanged("MaLH");
					this.OnMaLHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaNV", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaNV
		{
			get
			{
				return this._MaNV;
			}
			set
			{
				if ((this._MaNV != value))
				{
					this.OnMaNVChanging(value);
					this.SendPropertyChanging();
					this._MaNV = value;
					this.SendPropertyChanged("MaNV");
					this.OnMaNVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMain", DbType="Bit")]
		public System.Nullable<bool> IsMain
		{
			get
			{
				return this._IsMain;
			}
			set
			{
				if ((this._IsMain != value))
				{
					this.OnIsMainChanging(value);
					this.SendPropertyChanging();
					this._IsMain = value;
					this.SendPropertyChanged("IsMain");
					this.OnIsMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNhac", DbType="Bit")]
		public System.Nullable<bool> IsNhac
		{
			get
			{
				return this._IsNhac;
			}
			set
			{
				if ((this._IsNhac != value))
				{
					this.OnIsNhacChanging(value);
					this.SendPropertyChanging();
					this._IsNhac = value;
					this.SendPropertyChanged("IsNhac");
					this.OnIsNhacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaNhac", DbType="Bit")]
		public System.Nullable<bool> DaNhac
		{
			get
			{
				return this._DaNhac;
			}
			set
			{
				if ((this._DaNhac != value))
				{
					this.OnDaNhacChanging(value);
					this.SendPropertyChanging();
					this._DaNhac = value;
					this.SendPropertyChanged("DaNhac");
					this.OnDaNhacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayNhac", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayNhac
		{
			get
			{
				return this._NgayNhac;
			}
			set
			{
				if ((this._NgayNhac != value))
				{
					this.OnNgayNhacChanging(value);
					this.SendPropertyChanging();
					this._NgayNhac = value;
					this.SendPropertyChanged("NgayNhac");
					this.OnNgayNhacChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
